@{
    ViewData["Title"] = "Change Logs";
    Layout = "~/Views/Shared/_Dashboard.cshtml";
}
<div class="container mt-5">
    <div class="card shadow-lg border-0 rounded-4">
        <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
            <h4 class="mb-0"><i class="bi bi-clock-fill me-2"></i> Change Log</h4>
            <button class="btn btn-light btn-sm rounded-pill px-3" onclick="location.reload();">
                <i class="bi bi-arrow-repeat"></i> Refresh
            </button>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table id="changeLogsTable" class="table table-striped table-hover align-middle">
                    <thead class="table-dark text-center">
                        <tr>
                            <th><i class="bi bi-box-seam"></i> Entity</th>
                            <th><i class="bi bi-hash"></i> Entity ID</th>
                            <th><i class="bi bi-tools"></i> Action</th>
                            <th><i class="bi bi-arrow-left-circle"></i> Old Values</th>
                            <th><i class="bi bi-arrow-right-circle"></i> New Values</th>
                            <th><i class="bi bi-calendar-check"></i> Date</th>
                            <th><i class="bi bi-person-circle"></i> Changed By</th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- Data will be loaded dynamically -->
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Modal for Viewing JSON Data -->
<div class="modal fade" id="jsonModal" tabindex="-1" aria-labelledby="jsonModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-secondary text-white">
                <h5 class="modal-title"><i class="bi bi-file-earmark-text"></i> Change Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <pre id="jsonData" class="p-3 bg-light border rounded text-wrap"></pre>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <link rel="stylesheet" href="https://cdn.datatables.net/1.10.25/css/dataTables.bootstrap5.min.css">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.datatables.net/1.10.25/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.datatables.net/1.10.25/js/dataTables.bootstrap5.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
    <style>
        #jsonData {
            max-height: 70vh;
            overflow-y: auto;
            font-family: monospace;
            font-size: 14px;
            line-height: 1.5;
            white-space: pre-wrap;
            word-wrap: break-word;
            background-color: #f8f9fa;
            padding: 1rem;
            border-radius: 0.25rem;
        }

        .modal-lg {
            max-width: 90%;
        }

        @@media (min-width: 992px) {
            .modal-lg

        {
            max-width: 800px;
        }

        }
    </style>
    <script>
          $(document).ready(function () {
                $('#changeLogsTable').DataTable({
        processing: true,
        serverSide: true,
        ajax: {
            url: '@Url.Action("GetChangeLogs")',
            type: 'POST',
            error: function(xhr, error, thrown) {
                console.error('DataTables error:', xhr.responseText);
                alert('Error loading change logs: ' + xhr.responseText);
            }
        },
                // Add loading indicator
                processing: true,
                language: {
                    processing: '<div class="spinner-border text-primary" role="status"><span class="visually-hidden">Loading...</span></div>'
                },
                // Improve performance
                deferRender: true,
                scroller: true,
                scrollY: '50vh',
                scrollX: false,
                order: [[5, 'desc']],
                columns: [
                    { data: 'entityName', className: "text-center" },
                    { data: 'entityId', className: "text-center" },
                    { data: 'actionType', className: "text-center" },
                    {
                        data: 'hasOldValues',
                        className: "text-center",
                        render: function (data) {
                            return data ?
                                '<button class="btn btn-sm btn-outline-info rounded-pill" onclick="fetchValues(\'old\', this)"><i class="bi bi-eye-fill"></i> View</button>' :
                                '<span class="text-muted">No Data</span>';
                        }
                    },
                    {
                        data: 'hasNewValues',
                        className: "text-center",
                        render: function (data) {
                            return data ?
                                '<button class="btn btn-sm btn-outline-info rounded-pill" onclick="fetchValues(\'new\', this)"><i class="bi bi-eye-fill"></i> View</button>' :
                                '<span class="text-muted">No Data</span>';
                        }
                    },
                    { data: 'changeDate', className: "text-center" },
                    { data: 'userFullName', className: "text-center" }
                ]
            });

            // Add function to fetch values only when needed
            window.fetchValues = function(type, button) {
                var row = $(button).closest('tr');
                var table = $('#changeLogsTable').DataTable();
                var data = table.row(row).data();

                $.ajax({
                    url: '@Url.Action("GetChangeLogValues")',
                    type: 'GET',
                    data: {
                        id: data.entityId,
                        entityName: data.entityName,
                        type: type
                    },
                    success: function(response) {
                        showJsonModal(response.values, type === 'old' ? 'Old Values' : 'New Values');
                    },
                    error: function() {
                        alert('Error loading values');
                    }
                });
            }
        });

             function formatJsonButton(json, title) {
            if (!json) return '<span class="text-muted">No Data</span>';
            try {
                // Encode the JSON data to prevent script injection and preserve formatting
                const encodedJson = encodeURIComponent(json);
                return `<button class="btn btn-sm btn-outline-info rounded-pill" onclick="showJsonModal('${encodedJson}', '${title}')">
                            <i class="bi bi-eye-fill"></i> View
                        </button>`;
            } catch (error) {
                console.error('Error formatting button:', error);
                return '<span class="text-danger">Invalid Data</span>';
            }
        }

        function showJsonModal(encodedJson, title) {
            try {
                // Decode the JSON string and parse it
                const jsonString = decodeURIComponent(encodedJson);
                const parsedData = JSON.parse(jsonString);

                // Format the JSON with indentation
                const formattedJson = JSON.stringify(parsedData, null, 2);

                // Update modal title and content
                document.querySelector('#jsonModal .modal-title').textContent = title;
                document.getElementById('jsonData').textContent = formattedJson;

                // Show the modal
                const modal = new bootstrap.Modal(document.getElementById('jsonModal'));
                modal.show();
            } catch (error) {
                console.error('Error showing JSON:', error);
                alert('Error displaying data');
            }
        }
    </script>
}
