@model List<NotificationViewModel>
@{
    ViewData["Title"] = "Notifications";
    Layout = "~/Views/Shared/_Dashboard_Tabler.cshtml";
}

<style>
    .notifications-container {
        /* background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); */
        min-height: 100vh;
        padding: 2rem 0;
    }

    .notifications-card {
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(20px);
        border: 1px solid rgba(255, 255, 255, 0.2);
        box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
        border-radius: 24px;
        overflow: hidden;
        transition: all 0.3s ease;
    }

    .notifications-header {
        background: linear-gradient(135deg, #4f46e5 0%, #7c3aed 100%);
        padding: 2rem;
        position: relative;
        overflow: hidden;
    }

        .notifications-header::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grain" width="100" height="100" patternUnits="userSpaceOnUse"><circle cx="25" cy="25" r="1" fill="rgba(255,255,255,0.1)"/><circle cx="75" cy="75" r="1" fill="rgba(255,255,255,0.05)"/><circle cx="50" cy="10" r="0.5" fill="rgba(255,255,255,0.1)"/></pattern></defs><rect width="100" height="100" fill="url(%23grain)"/></svg>');
            opacity: 0.3;
        }

    .notifications-title {
        font-size: 2.5rem;
        font-weight: 700;
        color: white;
        margin: 0;
        display: flex;
        align-items: center;
        gap: 1rem;
        position: relative;
        z-index: 1;
    }

    .notifications-count {
        background: rgba(255, 255, 255, 0.2);
        color: white;
        padding: 0.5rem 1rem;
        border-radius: 50px;
        font-size: 0.9rem;
        font-weight: 600;
        backdrop-filter: blur(10px);
    }

    .mark-all-btn {
        background: rgba(255, 255, 255, 0.15);
        border: 2px solid rgba(255, 255, 255, 0.3);
        color: white;
        padding: 0.75rem 1.5rem;
        border-radius: 50px;
        font-weight: 600;
        transition: all 0.3s ease;
        backdrop-filter: blur(10px);
        position: relative;
        z-index: 1;
    }

        .mark-all-btn:hover {
            background: rgba(255, 255, 255, 0.25);
            border-color: rgba(255, 255, 255, 0.5);
            color: white;
            transform: translateY(-2px);
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
        }

    .notifications-body {
        padding: 2rem;
    }

    .empty-state {
        text-align: center;
        padding: 4rem 2rem;
        background: linear-gradient(135deg, #f8faff 0%, #f0f4ff 100%);
        border-radius: 16px;
        border: 2px dashed #e2e8f0;
    }

    .empty-state-icon {
        font-size: 4rem;
        color: #cbd5e1;
        margin-bottom: 1rem;
    }

    .empty-state-title {
        font-size: 1.5rem;
        font-weight: 600;
        color: #475569;
        margin-bottom: 0.5rem;
    }

    .empty-state-text {
        color: #64748b;
        font-size: 1rem;
    }

    .notification-item {
        background: white;
        border: 1px solid #e2e8f0;
        border-radius: 16px;
        margin-bottom: 1rem;
        padding: 1.5rem;
        transition: all 0.3s ease;
        position: relative;
        overflow: hidden;
    }

        .notification-item:hover {
            transform: translateY(-2px);
            box-shadow: 0 12px 24px rgba(0, 0, 0, 0.1);
            border-color: #c7d2fe;
        }

        .notification-item.unread {
            background: linear-gradient(135deg, #fef7ff 0%, #f3e8ff 100%);
            border-color: #c084fc;
            position: relative;
        }

            .notification-item.unread::before {
                content: '';
                position: absolute;
                left: 0;
                top: 0;
                bottom: 0;
                width: 4px;
                background: linear-gradient(135deg, #8b5cf6 0%, #a855f7 100%);
            }

    .notification-badge {
        background: linear-gradient(135deg, #8b5cf6 0%, #a855f7 100%);
        color: white;
        padding: 0.25rem 0.75rem;
        border-radius: 50px;
        font-size: 0.75rem;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        animation: pulse 2s infinite;
    }

    @@keyframes pulse {
        0%, 100%

    {
        opacity: 1;
    }

    50% {
        opacity: 0.7;
    }

    }

    .notification-title {
        font-size: 1.25rem;
        font-weight: 600;
        color: #1e293b;
        margin-bottom: 0.5rem;
        line-height: 1.4;
    }

    .notification-message {
        color: #475569;
        font-size: 1rem;
        line-height: 1.6;
        margin-bottom: 0.75rem;
    }

    .notification-time {
        color: #64748b;
        font-size: 0.875rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .notification-actions {
        display: flex;
        gap: 0.5rem;
        align-items: center;
    }

    .action-btn {
        background: white;
        border: 2px solid #e2e8f0;
        color: #475569;
        padding: 0.5rem;
        border-radius: 12px;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        justify-content: center;
        width: 40px;
        height: 40px;
    }

        .action-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.1);
        }

        .action-btn.btn-check {
            border-color: #22c55e;
            color: #22c55e;
        }

            .action-btn.btn-check:hover {
                background: #22c55e;
                color: white;
            }

        .action-btn.btn-view {
            border-color: #3b82f6;
            color: #3b82f6;
        }

            .action-btn.btn-view:hover {
                background: #3b82f6;
                color: white;
            }

        .action-btn.btn-delete {
            border-color: #ef4444;
            color: #ef4444;
        }

            .action-btn.btn-delete:hover {
                background: #ef4444;
                color: white;
            }

    .notification-content {
        flex: 1;
        min-width: 0;
    }

    .notification-wrapper {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        gap: 1.5rem;
    }

    @@media (max-width: 768px) {
        .notifications-container

    {
        padding: 1rem;
    }

    .notifications-title {
        font-size: 2rem;
    }

    .notifications-header {
        padding: 1.5rem;
    }

    .notifications-body {
        padding: 1rem;
    }

    .notification-wrapper {
        flex-direction: column;
        gap: 1rem;
    }

    .notification-actions {
        align-self: stretch;
        justify-content: flex-end;
    }

    }
</style>

<div class="notifications-container">
    <div class="container">
        <div class="notifications-card">
            <div class="notifications-header">
                <div class="d-flex justify-content-between align-items-center">
                    <div class="d-flex align-items-center gap-3">
                        <h1 class="notifications-title">
                            <i class="bi bi-bell-fill"></i>
                            Notifications
                        </h1>
                        @if (Model.Any())
                        {
                            <span class="notifications-count">
                                @Model.Count(n => !n.IsRead) new
                            </span>
                        }
                    </div>
                    @if (Model.Any())
                    {
                        <form asp-action="MarkAllAsRead" method="post" class="d-inline">
                            <button type="submit" class="mark-all-btn">
                                <i class="bi bi-check-all me-2"></i>
                                Mark All as Read
                            </button>
                        </form>
                    }
                </div>
            </div>

            <div class="notifications-body">
                @if (!Model.Any())
                {
                    <div class="empty-state">
                        <div class="empty-state-icon">
                            <i class="bi bi-bell-slash"></i>
                        </div>
                        <h3 class="empty-state-title">No notifications yet</h3>
                        <p class="empty-state-text">
                            When you receive notifications, they'll appear here to keep you updated.
                        </p>
                    </div>
                }
                else
                {
                    <div class="notifications-list">
                        @foreach (var notification in Model)
                        {
                            <div class="notification-item @(!notification.IsRead ? "unread" : "")">
                                <div class="notification-wrapper">
                                    <div class="notification-content">
                                        <div class="d-flex align-items-center gap-2 mb-2">
                                            @if (!notification.IsRead)
                                            {
                                                <span class="notification-badge">New</span>
                                            }
                                        </div>
                                        <h4 class="notification-title">@notification.Title</h4>
                                        <p class="notification-message">@notification.Message</p>
                                        <div class="notification-time">
                                            <i class="bi bi-clock"></i>
                                            @notification.TimeAgo
                                        </div>
                                    </div>

                                    <div class="notification-actions">
                                        @if (!notification.IsRead)
                                        {
                                            <form asp-action="MarkAsRead" method="post" class="d-inline">
                                                <input type="hidden" name="id" value="@notification.Id" />
                                                <button type="submit" class="action-btn btn-check" title="Mark as read">
                                                    <i class="bi bi-check"></i>
                                                </button>
                                            </form>
                                        }

                                        @if (!string.IsNullOrEmpty(notification.ActionUrl))
                                        {
                                            <a href="@notification.ActionUrl" class="action-btn btn-view" title="View details">
                                                <i class="bi bi-arrow-up-right"></i>
                                            </a>
                                        }

                                        <form asp-action="Delete" method="post" class="d-inline">
                                            <input type="hidden" name="id" value="@notification.Id" />
                                            <button type="submit" class="action-btn btn-delete" title="Delete notification"
                                                    onclick="return confirm('Are you sure you want to delete this notification?')">
                                                <i class="bi bi-trash"></i>
                                            </button>
                                        </form>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
    </div>
</div>