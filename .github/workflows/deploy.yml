name: Deploy Asset Management System to AWS EC2

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOTNET_VERSION: '9.0.x'
  PROJECT_PATH: 'AssetManagementSystem.PL'
  SOLUTION_PATH: 'AssetManagementSystem.PL/AssetManagementSystem.PL.sln'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Cache NuGet packages
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_PATH }}

    - name: Build solution
      run: dotnet build ${{ env.SOLUTION_PATH }} --no-restore --configuration Release

    - name: Run tests (if any)
      run: |
        if [ -d "AssetManagementSystem.Tests" ]; then
          dotnet test ${{ env.SOLUTION_PATH }} --no-build --verbosity normal --configuration Release
        else
          echo "No tests found, skipping test step"
        fi

    - name: Publish application
      run: |
        dotnet publish ${{ env.PROJECT_PATH }}/${{ env.PROJECT_PATH }}.csproj \
          -c Release \
          -o ./publish \
          --no-restore \
          --verbosity normal

    - name: Create deployment package
      run: |
        cd publish
        
        # Create .env file for production
        cat > .env << EOF
        DB_SERVER=${{ secrets.DB_SERVER }}
        DB_NAME=AssetManagementDB
        DB_USER=admin
        DB_PASSWORD=${{ secrets.DB_PASSWORD }}
        EMAIL_SENDER=momenhassan7240@gmail.com
        EMAIL_ACCOUNT=momenhassan7240@gmail.com
        EMAIL_PASSWORD=${{ secrets.EMAIL_PASSWORD }}
        EOF
        
        # Create production appsettings
        cat > appsettings.Production.json << EOF
        {
          "ConnectionStrings": {
            "DefaultConnection": "Server=${{ secrets.DB_SERVER }},1433;Database=AssetManagementDB;User Id=admin;Password=${{ secrets.DB_PASSWORD }};Encrypt=True;TrustServerCertificate=True;"
          },
          "Logging": {
            "LogLevel": {
              "Default": "Information",
              "Microsoft.AspNetCore": "Warning",
              "Microsoft.EntityFrameworkCore": "Warning"
            }
          },
          "AllowedHosts": "*",
          "ApplicationUrl": "http://${{ secrets.AWS_EC2_HOST }}",
          "Email": {
            "Server": "smtp.gmail.com",
            "Port": 587,
            "SenderName": "Asset Management System",
            "SenderEmail": "momenhassan7240@gmail.com",
            "Account": "momenhassan7240@gmail.com",
            "Password": "${{ secrets.EMAIL_PASSWORD }}",
            "Security": true
          }
        }
        EOF
        
        # Create deployment archive
        zip -r ../deployment.zip .
        cd ..
        echo "Deployment package created: $(ls -lh deployment.zip)"

    - name: Check and install .NET 9 runtime
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.AWS_EC2_HOST }}
        username: ${{ secrets.AWS_EC2_USER }}
        key: ${{ secrets.AWS_EC2_KEY }}
        timeout: 600s
        script: |
          echo "Checking .NET installation..."
          
          # Function to check if .NET 9 is installed (improved version)
          check_dotnet() {
            if command -v dotnet &> /dev/null; then
              echo "dotnet command found"
              # Check for any .NET 9.x runtime
              if dotnet --list-runtimes | grep -q "Microsoft.AspNetCore.App 9.0"; then
                echo "ASP.NET Core 9.0 runtime found"
                return 0
              elif dotnet --list-runtimes | grep -q "Microsoft.NETCore.App 9.0"; then
                echo ".NET 9.0 runtime found"
                return 0
              else
                echo "No .NET 9.x runtime found"
                return 1
              fi
            else
              echo "dotnet command not found"
              return 1
            fi
          }
          
          # Check current .NET installation
          echo "Current .NET installation status:"
          if command -v dotnet &> /dev/null; then
            dotnet --version || echo "Failed to get .NET version"
            dotnet --list-runtimes || echo "Failed to list runtimes"
          else
            echo "dotnet command not available"
          fi
          
          # Check if .NET 9 is already installed
          if check_dotnet; then
            echo "✅ .NET 9 runtime is already installed"
            dotnet --version
            dotnet --list-runtimes
          else
            echo "⚠️  .NET 9 runtime not found. Installing..."
            
            # Skip package update and problematic dependencies
            echo "Skipping system package update to avoid conflicts..."
            
            # Only install wget if absolutely necessary (skip curl due to conflicts)
            if ! command -v wget &> /dev/null; then
              echo "Installing wget..."
              sudo yum install -y wget --skip-broken || echo "wget installation failed, continuing..."
            fi
            
            # Use Microsoft's official installation method for Amazon Linux
            echo "Adding Microsoft package repository..."
            if [ ! -f /etc/yum.repos.d/microsoft-prod.repo ]; then
              sudo rpm -Uvh https://packages.microsoft.com/config/rhel/8/packages-microsoft-prod.rpm || echo "Repository already exists"
            fi
              echo "Installing .NET 9 ASP.NET Core Runtime..."
            sudo yum install -y aspnetcore-runtime-9.0 --skip-broken || {
              echo "Package manager installation failed, trying dotnet-install script..."
              
              # Fallback to dotnet-install script - install both runtime and aspnetcore
              echo "Downloading .NET 9 installation script..."
              if command -v curl &> /dev/null; then
                # Install .NET runtime first
                curl -sSL https://dot.net/v1/dotnet-install.sh | bash /dev/stdin --channel 9.0 --runtime dotnet
                # Then install ASP.NET Core runtime
                curl -sSL https://dot.net/v1/dotnet-install.sh | bash /dev/stdin --channel 9.0 --runtime aspnetcore
              elif command -v wget &> /dev/null; then
                # Install .NET runtime first
                wget -qO- https://dot.net/v1/dotnet-install.sh | bash /dev/stdin --channel 9.0 --runtime dotnet
                # Then install ASP.NET Core runtime
                wget -qO- https://dot.net/v1/dotnet-install.sh | bash /dev/stdin --channel 9.0 --runtime aspnetcore
              else
                echo "Neither curl nor wget available for downloading .NET installer"
                exit 1
              fi
              
              # Add .NET to PATH for current session
              export PATH="$HOME/.dotnet:$PATH"
              export DOTNET_ROOT="$HOME/.dotnet"
              
              # Add .NET to PATH permanently for ec2-user
              echo 'export PATH="$HOME/.dotnet:$PATH"' >> ~/.bashrc
              echo 'export DOTNET_ROOT="$HOME/.dotnet"' >> ~/.bashrc
                # Create system-wide dotnet symlink
              sudo ln -sf $HOME/.dotnet/dotnet /usr/local/bin/dotnet || echo "Failed to create symlink at /usr/local/bin"
              sudo ln -sf $HOME/.dotnet/dotnet /usr/bin/dotnet || echo "Failed to create symlink at /usr/bin"
            }
            
            # Wait a moment for installation to complete
            sleep 3
            
            # Refresh PATH
            export PATH="$HOME/.dotnet:/usr/local/bin:$PATH"
            hash -r
              # Verify installation
            echo "Verifying .NET installation..."
            if command -v dotnet &> /dev/null; then
              echo "✅ dotnet command is available"
              echo "dotnet version: $(dotnet --version 2>&1 || echo 'version check failed')"
              echo "dotnet runtimes: $(dotnet --list-runtimes 2>&1 || echo 'runtime list failed')"
              
              # Check if the dotnet executable is actually working
              if dotnet --info >/dev/null 2>&1; then
                echo "✅ dotnet executable is working properly"
              else
                echo "⚠️ dotnet executable found but not working properly"
              fi
              
              # Final check
              if check_dotnet; then
                echo "✅ .NET 9 runtime installed successfully"
              else
                echo "⚠️  .NET 9 runtime installation may be incomplete, but continuing..."
              fi
            else
              echo "❌ dotnet command still not available after installation"
              echo "Checking for dotnet in common locations..."
              ls -la /usr/bin/dotnet /usr/local/bin/dotnet $HOME/.dotnet/dotnet 2>/dev/null || echo "dotnet not found in common locations"
              
              # Try to add direct path and test
              if [ -f "$HOME/.dotnet/dotnet" ]; then
                echo "Found dotnet at $HOME/.dotnet/dotnet, testing directly:"
                $HOME/.dotnet/dotnet --version || echo "Direct execution failed"
              fi
              
              exit 1
            fi
          fi

    - name: Setup nginx
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.AWS_EC2_HOST }}
        username: ${{ secrets.AWS_EC2_USER }}
        key: ${{ secrets.AWS_EC2_KEY }}
        timeout: 300s
        script: |
          echo "Setting up nginx..."
          
          # Install nginx if not present
          if ! command -v nginx &> /dev/null; then
            echo "Installing nginx..."
            sudo yum update -y
            sudo amazon-linux-extras install nginx1 -y || sudo yum install nginx -y
          else
            echo "nginx is already installed"
          fi
          
          # Copy nginx configuration
          sudo tee /etc/nginx/conf.d/assetmanagement.conf > /dev/null <<EOF
          server {
              listen 80;
              server_name ${{ secrets.AWS_EC2_HOST }};
              
              # Security headers
              add_header X-Frame-Options "SAMEORIGIN" always;
              add_header X-XSS-Protection "1; mode=block" always;
              add_header X-Content-Type-Options "nosniff" always;
              add_header Referrer-Policy "no-referrer-when-downgrade" always;
              add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;
              
              # Asset Management System
              location / {
                  proxy_pass http://127.0.0.1:5000;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade \$http_upgrade;
                  proxy_set_header Connection keep-alive;
                  proxy_set_header Host \$host;
                  proxy_set_header X-Real-IP \$remote_addr;
                  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto \$scheme;
                  proxy_cache_bypass \$http_upgrade;
                  proxy_buffering off;
                  proxy_read_timeout 300;
                  proxy_connect_timeout 300;
                  proxy_send_timeout 300;
              }
              
              # Static files
              location /files/ {
                  alias /var/www/assetmanagement/files/;
                  expires 30d;
                  add_header Cache-Control "public, immutable";
              }
              
              # Health check
              location /nginx-health {
                  access_log off;
                  return 200 "healthy\n";
                  add_header Content-Type text/plain;
              }
          }
          EOF
          
          # Test nginx configuration
          sudo nginx -t
          
          # Enable and start nginx
          sudo systemctl enable nginx
          sudo systemctl start nginx
          
          echo "✅ nginx configured and started"

    - name: Setup systemd service
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.AWS_EC2_HOST }}
        username: ${{ secrets.AWS_EC2_USER }}
        key: ${{ secrets.AWS_EC2_KEY }}
        script: |
          echo "Setting up systemd service..."
            # Create systemd service file
          sudo tee /etc/systemd/system/assetmanagement.service > /dev/null <<EOF
          [Unit]
          Description=Asset Management System - ASP.NET Core Application
          After=network.target
          StartLimitIntervalSec=0
          
          [Service]
          Type=notify
          User=ec2-user
          Group=ec2-user
          WorkingDirectory=/var/www/assetmanagement/current
          ExecStart=/home/ec2-user/.dotnet/dotnet AssetManagementSystem.PL.dll
          ExecReload=/bin/kill -HUP \$MAINPID
          Restart=always
          RestartSec=5
          TimeoutStopSec=90
          SyslogIdentifier=assetmanagement
          Environment=ASPNETCORE_ENVIRONMENT=Production
          Environment=DOTNET_ROOT=/home/ec2-user/.dotnet
          Environment=PATH=/home/ec2-user/.dotnet:/usr/local/bin:/usr/bin:/bin
          Environment=ASPNETCORE_URLS=http://0.0.0.0:5000
          
          # Security settings
          NoNewPrivileges=true
          PrivateTmp=true
          ProtectSystem=strict
          ReadWritePaths=/var/www/assetmanagement
          ReadWritePaths=/tmp
          ReadWritePaths=/var/log
          
          # Resource limits
          LimitNOFILE=65536
          LimitNPROC=4096
          
          # Logging
          StandardOutput=journal
          StandardError=journal
          
          [Install]
          WantedBy=multi-user.target
          EOF
          
          # Create log directory
          sudo mkdir -p /var/log/assetmanagement
          sudo chown ec2-user:ec2-user /var/log/assetmanagement
          
          # Reload systemd
          sudo systemctl daemon-reload
          sudo systemctl enable assetmanagement
          
          echo "✅ systemd service configured"

    - name: Stop existing application
      uses: appleboy/ssh-action@v1.0.3
      continue-on-error: true
      with:
        host: ${{ secrets.AWS_EC2_HOST }}
        username: ${{ secrets.AWS_EC2_USER }}
        key: ${{ secrets.AWS_EC2_KEY }}
        script: |
          echo "Stopping existing application..."
          sudo systemctl stop assetmanagement || echo "Service was not running"
          
          # Kill any remaining processes
          sudo pkill -f "AssetManagementSystem.PL" || echo "No processes to kill"
          
          # Wait for processes to stop
          sleep 5

    - name: Backup current version
      uses: appleboy/ssh-action@v1.0.3
      continue-on-error: true
      with:
        host: ${{ secrets.AWS_EC2_HOST }}
        username: ${{ secrets.AWS_EC2_USER }}
        key: ${{ secrets.AWS_EC2_KEY }}
        script: |
          # Create app directory if it doesn't exist
          sudo mkdir -p /var/www/assetmanagement
          sudo chown ec2-user:ec2-user /var/www/assetmanagement
          
          # Backup current version if exists
          if [ -d "/var/www/assetmanagement/current" ]; then
            BACKUP_NAME="backup_$(date +%Y%m%d_%H%M%S)"
            echo "Creating backup: $BACKUP_NAME"
            mv /var/www/assetmanagement/current /var/www/assetmanagement/$BACKUP_NAME
            
            # Keep only last 3 backups
            cd /var/www/assetmanagement
            ls -t backup_* 2>/dev/null | tail -n +4 | xargs rm -rf
          fi

    - name: Deploy application
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.AWS_EC2_HOST }}
        username: ${{ secrets.AWS_EC2_USER }}
        key: ${{ secrets.AWS_EC2_KEY }}
        source: "deployment.zip"
        target: "/tmp/"

    - name: Extract and configure application
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.AWS_EC2_HOST }}
        username: ${{ secrets.AWS_EC2_USER }}
        key: ${{ secrets.AWS_EC2_KEY }}
        script: |
          cd /var/www/assetmanagement
          
          # Extract application
          echo "Extracting application..."
          unzip -o /tmp/deployment.zip -d current/
          rm /tmp/deployment.zip
          
          # Set permissions
          chmod +x current/AssetManagementSystem.PL
          
          # Create necessary directories
          mkdir -p current/wwwroot/files
          mkdir -p current/Logs
          chmod 755 current/wwwroot/files
          
          # Create symbolic link for file storage
          if [ ! -L /var/www/assetmanagement/files ]; then
            ln -sf /var/www/assetmanagement/current/wwwroot/files /var/www/assetmanagement/files
          fi
          
          # Set ownership
          chown -R ec2-user:ec2-user /var/www/assetmanagement/
          
          echo "Application extracted and configured successfully"

    - name: Run database migrations
      uses: appleboy/ssh-action@v1.0.3
      continue-on-error: true
      with:
        host: ${{ secrets.AWS_EC2_HOST }}
        username: ${{ secrets.AWS_EC2_USER }}
        key: ${{ secrets.AWS_EC2_KEY }}
        script: |
          cd /var/www/assetmanagement/current
          
          # Set environment variables
          export ASPNETCORE_ENVIRONMENT=Production
          
          # Try to run migrations if the command exists
          echo "Checking for database migrations..."
          if dotnet ef --help > /dev/null 2>&1; then
            echo "Running database migrations..."
            dotnet ef database update || echo "No migrations to run or EF tools not available"
          else
            echo "EF Core tools not available, skipping migrations"
          fi

    - name: Install .NET and Start application
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.AWS_EC2_HOST }}
        username: ${{ secrets.AWS_EC2_USER }}
        key: ${{ secrets.AWS_EC2_KEY }}
        timeout: 300s
        command_timeout: 15m
        script: |
          # Ensure .NET is available and verify version
          if ! command -v dotnet &> /dev/null; then
            echo "📦 dotnet command not found, setting up PATH..."
            export PATH="$HOME/.dotnet:/usr/local/bin:$PATH"
            export DOTNET_ROOT="$HOME/.dotnet"
            
            if ! command -v dotnet &> /dev/null; then
              echo "❌ .NET still not available, attempting emergency installation..."              # Emergency fallback installation
              # Install .NET runtime first
              curl -sSL https://dot.net/v1/dotnet-install.sh | bash /dev/stdin --channel 9.0 --runtime dotnet
              # Then install ASP.NET Core runtime
              curl -sSL https://dot.net/v1/dotnet-install.sh | bash /dev/stdin --channel 9.0 --runtime aspnetcore
              export PATH="$HOME/.dotnet:$PATH"
              sudo ln -sf $HOME/.dotnet/dotnet /usr/local/bin/dotnet 2>/dev/null || true
              sudo ln -sf $HOME/.dotnet/dotnet /usr/bin/dotnet 2>/dev/null || true
              
              if ! command -v dotnet &> /dev/null; then
                echo "❌ Failed to install .NET runtime"
                exit 1
              fi
            fi
          fi
            # Verify .NET installation
          echo "✅ .NET is available: $(dotnet --version)"
          echo "Available runtimes:"
          dotnet --list-runtimes
            # Ensure dotnet symlinks exist for systemd service
          sudo ln -sf $HOME/.dotnet/dotnet /usr/local/bin/dotnet 2>/dev/null || true
          sudo ln -sf $HOME/.dotnet/dotnet /usr/bin/dotnet 2>/dev/null || true          # Stop and disable any existing service before creating new configuration
          sudo systemctl stop assetmanagement 2>/dev/null || true
          sudo systemctl disable assetmanagement 2>/dev/null || true
          
          # Remove old service file to ensure clean configuration
          sudo rm -f /etc/systemd/system/assetmanagement.service
          sudo systemctl daemon-reload
          
          # Verify dotnet paths before creating service
          echo "Verifying dotnet executable paths:"
          ls -la /usr/bin/dotnet /usr/local/bin/dotnet $HOME/.dotnet/dotnet 2>/dev/null || echo "Some dotnet paths not found"
          which dotnet || echo "dotnet not in PATH"# Update systemd service file with correct configuration
          sudo tee /etc/systemd/system/assetmanagement.service > /dev/null <<EOF
          [Unit]
          Description=Asset Management System - .NET Web Application
          After=network.target
          StartLimitIntervalSec=0

          [Service]
          Type=notify
          User=ec2-user
          Group=ec2-user
          WorkingDirectory=/var/www/assetmanagement/current
          ExecStart=/home/ec2-user/.dotnet/dotnet AssetManagementSystem.PL.dll
          Restart=always
          RestartSec=5
          Environment=ASPNETCORE_ENVIRONMENT=Production
          Environment=ASPNETCORE_URLS=http://localhost:5000
          Environment=DOTNET_PRINT_TELEMETRY_MESSAGE=false
          Environment=DOTNET_CLI_TELEMETRY_OPTOUT=1
          NoNewPrivileges=true
          PrivateTmp=true
          ProtectSystem=strict
          ProtectHome=true
          ReadWritePaths=/var/www/assetmanagement/current/wwwroot/files
          ReadWritePaths=/var/www/assetmanagement/current/Logs
          StandardOutput=journal
          StandardError=journal
          SyslogIdentifier=assetmanagement
          KillMode=mixed
          TimeoutStartSec=30
          TimeoutStopSec=30

          [Install]
          WantedBy=multi-user.target
          EOF
            # Reload systemd configuration
          sudo systemctl daemon-reload
          
          # Verify the service configuration
          echo "Verifying systemd service configuration:"
          sudo cat /etc/systemd/system/assetmanagement.service | grep ExecStart || echo "ExecStart not found"
            # Test the dotnet executable path directly
          echo "Testing dotnet executable:"
          /home/ec2-user/.dotnet/dotnet --version || echo "Direct path test failed"
          
          # Test symlink paths as backup
          if [ -L "/usr/bin/dotnet" ]; then
            echo "Testing /usr/bin/dotnet symlink:"
            /usr/bin/dotnet --version || echo "Symlink path test failed"
          fi
          
          # Enable and start the application service
          echo "Starting Asset Management System..."
          sudo systemctl enable assetmanagement
          sudo systemctl start assetmanagement
          
          # Wait for service to start
          sleep 15
          
          # Check service status
          if sudo systemctl is-active --quiet assetmanagement; then
            echo "✅ Application started successfully"
            sudo systemctl status assetmanagement --no-pager -l
          else
            echo "❌ Failed to start application"
            echo "Service status:"
            sudo systemctl status assetmanagement --no-pager -l
            echo "Recent logs:"
            sudo journalctl -u assetmanagement --no-pager -l -n 30
            echo "Checking dotnet availability:"
            which dotnet || echo "dotnet not found in PATH"
            dotnet --version || echo "dotnet version check failed"
            echo "Checking application files:"
            ls -la /var/www/assetmanagement/current/
            exit 1
          fi

    - name: Health check
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.AWS_EC2_HOST }}
        username: ${{ secrets.AWS_EC2_USER }}
        key: ${{ secrets.AWS_EC2_KEY }}
        script: |
          echo "Performing comprehensive health checks..."
          
          # Wait for application to be fully ready
          echo "Waiting for application to initialize..."
          sleep 15
          
          # Install and configure Nginx if not present
          if ! command -v nginx &> /dev/null; then
            echo "📦 Installing Nginx..."
            sudo yum install -y nginx
            sudo systemctl enable nginx
            
            # Create basic nginx configuration
            sudo tee /etc/nginx/conf.d/assetmanagement.conf > /dev/null <<EOF
          server {
              listen 80;
              server_name _;
              
              location / {
                  proxy_pass http://localhost:5000;
                  proxy_set_header Host \$host;
                  proxy_set_header X-Real-IP \$remote_addr;
                  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto \$scheme;
              }
              
              location /health {
                  proxy_pass http://localhost:5000/health;
                  proxy_set_header Host \$host;
              }
          }
          EOF
            
            sudo systemctl start nginx
            echo "✅ Nginx installed and configured"
          fi
          
          # Ensure nginx is running
          sudo systemctl start nginx || true
          
          # Check application service status
          echo "=== SERVICE STATUS CHECK ==="
          if sudo systemctl is-active --quiet assetmanagement; then
            echo "✅ Asset Management service is active"
          else
            echo "❌ Asset Management service is not active"
            echo "Service status:"
            sudo systemctl status assetmanagement --no-pager -l
            echo "Recent logs:"
            sudo journalctl -u assetmanagement --no-pager -l -n 30
            exit 1
          fi
          
          # Check if application responds on localhost:5000
          echo "=== APPLICATION HEALTH CHECK ==="
          echo "Testing application on port 5000..."
          APP_READY=false
          for i in {1..30}; do
            if curl -f http://localhost:5000 > /dev/null 2>&1; then
              echo "✅ Application is responding on port 5000 (attempt $i)"
              APP_READY=true
              break
            fi
            echo "Waiting for application... (attempt $i/30)"
            sleep 5
          done
          
          if [ "$APP_READY" = false ]; then
            echo "❌ Application is not responding on port 5000 after 150 seconds"
            echo "Checking application logs..."
            sudo journalctl -u assetmanagement --no-pager -l -n 30
            echo "Checking if process is running..."
            ps aux | grep dotnet || echo "No dotnet processes found"
            echo "Checking port 5000..."
            sudo netstat -tlnp | grep :5000 || echo "Nothing listening on port 5000"
            echo "Checking .NET version..."
            dotnet --version || echo ".NET not found"
            exit 1
          fi
          
          # Test through nginx (port 80)
          echo "=== NGINX PROXY CHECK ==="
          echo "Testing application through Nginx..."
          NGINX_READY=false
          for i in {1..15}; do
            if curl -f http://localhost > /dev/null 2>&1; then
              echo "✅ Nginx proxy is working (attempt $i)"
              NGINX_READY=true
              break
            fi
            echo "Waiting for nginx... (attempt $i/15)"
            sleep 3
          done
          
          if [ "$NGINX_READY" = false ]; then
            echo "❌ Nginx proxy is not working"
            echo "Nginx status:"
            sudo systemctl status nginx --no-pager -l
            echo "Nginx configuration test:"
            sudo nginx -t
            echo "Checking port 80:"
            sudo netstat -tlnp | grep :80 || echo "Nothing listening on port 80"
          fi
          
          # Final deployment verification
          echo "=== DEPLOYMENT VERIFICATION ==="
          echo "Application URL: http://${{ secrets.AWS_EC2_HOST }}"
          echo "Service Status: $(sudo systemctl is-active assetmanagement)"
          echo "Nginx Status: $(sudo systemctl is-active nginx)"
          echo "Listening Ports:"
          sudo netstat -tlnp | grep -E ':80|:5000' || echo "No services listening on expected ports"
          
          if [ "$APP_READY" = true ] && [ "$NGINX_READY" = true ]; then
            echo "🎉 DEPLOYMENT SUCCESSFUL!"
            echo "Application is accessible at: http://${{ secrets.AWS_EC2_HOST }}"
          else
            echo "❌ DEPLOYMENT PARTIALLY FAILED"
            echo "Application direct access (port 5000): $APP_READY"
            echo "Nginx proxy access (port 80): $NGINX_READY"
            exit 1
          fi

    - name: Cleanup old backups
      uses: appleboy/ssh-action@v1.0.3
      continue-on-error: true
      with:
        host: ${{ secrets.AWS_EC2_HOST }}
        username: ${{ secrets.AWS_EC2_USER }}
        key: ${{ secrets.AWS_EC2_KEY }}
        script: |
          # Clean up old backups (keep only 3 most recent)
          cd /var/www/assetmanagement
          ls -t backup_* 2>/dev/null | tail -n +4 | xargs rm -rf || echo "No old backups to clean"
          
          # Clean up old log files
          find /var/log/assetmanagement -name "*.log" -mtime +30 -delete 2>/dev/null || echo "No old logs to clean"
          
          echo "Cleanup completed"