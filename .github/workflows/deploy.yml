name: Deploy Asset Management System to AWS EC2

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOTNET_VERSION: '9.0.x'
  PROJECT_PATH: 'AssetManagementSystem.PL'
  SOLUTION_PATH: 'AssetManagementSystem.PL/AssetManagementSystem.PL.sln'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Cache NuGet packages
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_PATH }}

    - name: Build solution
      run: dotnet build ${{ env.SOLUTION_PATH }} --no-restore --configuration Release

    - name: Run tests (if any)
      run: |
        if [ -d "AssetManagementSystem.Tests" ]; then
          dotnet test ${{ env.SOLUTION_PATH }} --no-build --verbosity normal --configuration Release
        else
          echo "No tests found, skipping test step"
        fi

    - name: Publish application
      run: |
        dotnet publish ${{ env.PROJECT_PATH }}/${{ env.PROJECT_PATH }}.csproj \
          -c Release \
          -o ./publish \
          --no-restore \
          --verbosity normal

    - name: Create deployment package
      run: |
        cd publish
        
        # Create .env file for production
        cat > .env << EOF
        DB_SERVER=${{ secrets.DB_SERVER }}
        DB_NAME=AssetManagementDB
        DB_USER=admin
        DB_PASSWORD=${{ secrets.DB_PASSWORD }}
        EMAIL_SENDER=momenhassan7240@gmail.com
        EMAIL_ACCOUNT=momenhassan7240@gmail.com
        EMAIL_PASSWORD=${{ secrets.EMAIL_PASSWORD }}
        EOF
        
        # Create production appsettings
        cat > appsettings.Production.json << EOF
        {
          "ConnectionStrings": {
            "DefaultConnection": "Server=${{ secrets.DB_SERVER }},1433;Database=AssetManagementDB;User Id=admin;Password=${{ secrets.DB_PASSWORD }};Encrypt=True;TrustServerCertificate=True;"
          },
          "Logging": {
            "LogLevel": {
              "Default": "Information",
              "Microsoft.AspNetCore": "Warning",
              "Microsoft.EntityFrameworkCore": "Warning"
            }
          },
          "AllowedHosts": "*",
          "ApplicationUrl": "http://${{ secrets.AWS_EC2_HOST }}",
          "Email": {
            "Server": "smtp.gmail.com",
            "Port": 587,
            "SenderName": "Asset Management System",
            "SenderEmail": "momenhassan7240@gmail.com",
            "Account": "momenhassan7240@gmail.com",
            "Password": "${{ secrets.EMAIL_PASSWORD }}",
            "Security": true
          }
        }
        EOF
        
        # Create deployment archive
        zip -r ../deployment.zip .
        cd ..
        echo "Deployment package created: $(ls -lh deployment.zip)"

    - name: Setup infrastructure
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.AWS_EC2_HOST }}
        username: ${{ secrets.AWS_EC2_USERNAME }}
        key: ${{ secrets.AWS_EC2_KEY }}
        timeout: 600s
        script: |
          echo "🔧 Setting up infrastructure..."
          
          # Create app directory structure
          sudo mkdir -p /var/www/assetmanagement
          sudo chown $USER:$USER /var/www/assetmanagement
          
          # Install nginx if not present
          if ! command -v nginx &> /dev/null; then
            echo "Installing nginx..."
            sudo yum update -y
            sudo amazon-linux-extras install nginx1 -y || sudo yum install nginx -y
          fi
          
          # Configure nginx
          sudo tee /etc/nginx/conf.d/assetmanagement.conf > /dev/null <<EOF
          server {
              listen 80;
              server_name ${{ secrets.AWS_EC2_HOST }};
              
              location / {
                  proxy_pass http://127.0.0.1:5000;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade \$http_upgrade;
                  proxy_set_header Connection keep-alive;
                  proxy_set_header Host \$host;
                  proxy_set_header X-Real-IP \$remote_addr;
                  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto \$scheme;
                  proxy_cache_bypass \$http_upgrade;
                  proxy_buffering off;
                  proxy_read_timeout 300;
                  proxy_connect_timeout 300;
                  proxy_send_timeout 300;
              }
              
              location /files/ {
                  alias /var/www/assetmanagement/files/;
                  expires 30d;
                  add_header Cache-Control "public, immutable";
              }
          }
          EOF
          
          sudo nginx -t
          sudo systemctl enable nginx
          sudo systemctl start nginx
          
          echo "✅ Infrastructure setup complete"

    - name: Install .NET Runtime
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.AWS_EC2_HOST }}
        username: ${{ secrets.AWS_EC2_USERNAME }}
        key: ${{ secrets.AWS_EC2_KEY }}
        timeout: 600s
        script: |
          echo "🔍 Checking current .NET installation status..."
          
          # Check if dotnet executable exists and has content
          if [ -f "$HOME/.dotnet/dotnet" ]; then
            DOTNET_SIZE=$(stat -c%s "$HOME/.dotnet/dotnet" 2>/dev/null || echo "0")
            echo "Current dotnet executable size: $DOTNET_SIZE bytes"
            
            if [ "$DOTNET_SIZE" -eq 0 ] || [ "$DOTNET_SIZE" -lt 1000 ]; then
              echo "⚠️ Detected corrupted .NET installation (size: $DOTNET_SIZE bytes)"
              echo "🧹 Removing corrupted installation..."
              rm -rf "$HOME/.dotnet"
              sudo rm -f /usr/bin/dotnet /usr/local/bin/dotnet 2>/dev/null || true
            fi
          fi
          
          # Force clean installation if .NET is not working
          if ! command -v dotnet &> /dev/null || ! dotnet --version &> /dev/null; then
            echo "🔄 Installing .NET 9 runtime with verbose logging..."
            
            # Set environment variables
            export DOTNET_ROOT="$HOME/.dotnet"
            export PATH="$DOTNET_ROOT:$PATH"
            
            # Create dotnet directory
            mkdir -p "$DOTNET_ROOT"
            
            # Download and install .NET with explicit parameters
            echo "📥 Downloading .NET installation script..."
            curl -sSL https://dot.net/v1/dotnet-install.sh -o /tmp/dotnet-install.sh
            chmod +x /tmp/dotnet-install.sh
            
            echo "🔧 Installing .NET Runtime 9.0..."
            /tmp/dotnet-install.sh --channel 9.0 --runtime dotnet --install-dir "$DOTNET_ROOT" --verbose || {
              echo "❌ First .NET installation attempt failed, trying alternative method..."
              
              # Alternative installation method
              wget -q https://dot.net/v1/dotnet-install.sh -O /tmp/dotnet-install-alt.sh
              chmod +x /tmp/dotnet-install-alt.sh
              /tmp/dotnet-install-alt.sh --channel 9.0 --runtime dotnet --install-dir "$DOTNET_ROOT" --verbose
            }
            
            echo "🔧 Installing ASP.NET Core Runtime 9.0..."
            /tmp/dotnet-install.sh --channel 9.0 --runtime aspnetcore --install-dir "$DOTNET_ROOT" --verbose || {
              echo "❌ ASP.NET Core installation failed, trying alternative..."
              /tmp/dotnet-install-alt.sh --channel 9.0 --runtime aspnetcore --install-dir "$DOTNET_ROOT" --verbose
            }
            
            # Verify installation was successful
            if [ -f "$DOTNET_ROOT/dotnet" ]; then
              DOTNET_SIZE=$(stat -c%s "$DOTNET_ROOT/dotnet")
              echo "✅ .NET executable installed, size: $DOTNET_SIZE bytes"
              
              if [ "$DOTNET_SIZE" -gt 1000 ]; then
                echo "✅ .NET installation appears successful"
              else
                echo "❌ .NET executable is too small ($DOTNET_SIZE bytes), installation may have failed"
                exit 1
              fi
            else
              echo "❌ .NET executable not found after installation"
              exit 1
            fi
            
            # Make executable and create symlinks
            chmod +x "$DOTNET_ROOT/dotnet"
            sudo ln -sf "$DOTNET_ROOT/dotnet" /usr/local/bin/dotnet
            sudo ln -sf "$DOTNET_ROOT/dotnet" /usr/bin/dotnet
            
            # Update PATH
            export PATH="$DOTNET_ROOT:/usr/local/bin:$PATH"
          fi
          
          # Final verification
          echo "🔍 Final .NET verification..."
          if command -v dotnet &> /dev/null; then
            echo "✅ .NET is available: $(dotnet --version)"
            echo "Available runtimes:"
            dotnet --list-runtimes
          else
            echo "❌ .NET command still not available"
            exit 1
          fi

    - name: Stop existing application
      uses: appleboy/ssh-action@v1.0.3
      continue-on-error: true
      with:
        host: ${{ secrets.AWS_EC2_HOST }}
        username: ${{ secrets.AWS_EC2_USERNAME }}
        key: ${{ secrets.AWS_EC2_KEY }}
        script: |
          echo "Stopping existing application..."
          sudo systemctl stop assetmanagement 2>/dev/null || echo "Service was not running"
          sudo pkill -f "AssetManagementSystem.PL" 2>/dev/null || echo "No processes to kill"
          sleep 5

    - name: Backup current version
      uses: appleboy/ssh-action@v1.0.3
      continue-on-error: true
      with:
        host: ${{ secrets.AWS_EC2_HOST }}
        username: ${{ secrets.AWS_EC2_USERNAME }}
        key: ${{ secrets.AWS_EC2_KEY }}
        script: |
          # Backup current version if exists
          if [ -d "/var/www/assetmanagement/current" ]; then
            BACKUP_NAME="backup_$(date +%Y%m%d_%H%M%S)"
            echo "Creating backup: $BACKUP_NAME"
            mv /var/www/assetmanagement/current /var/www/assetmanagement/$BACKUP_NAME
            
            # Keep only last 3 backups
            cd /var/www/assetmanagement
            ls -t backup_* 2>/dev/null | tail -n +4 | xargs rm -rf || true
          fi

    - name: Deploy application
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.AWS_EC2_HOST }}
        username: ${{ secrets.AWS_EC2_USERNAME }}
        key: ${{ secrets.AWS_EC2_KEY }}
        source: "deployment.zip"
        target: "/tmp/"

    - name: Extract and configure application
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.AWS_EC2_HOST }}
        username: ${{ secrets.AWS_EC2_USERNAME }}
        key: ${{ secrets.AWS_EC2_KEY }}
        script: |
          cd /var/www/assetmanagement
          
          # Extract application
          echo "Extracting application..."
          unzip -o /tmp/deployment.zip -d current/
          rm /tmp/deployment.zip
          
          # Set permissions
          chmod +x current/AssetManagementSystem.PL
          
          # Create necessary directories
          mkdir -p current/wwwroot/files
          mkdir -p current/Logs
          chmod 755 current/wwwroot/files
          
          # Create symbolic link for file storage
          if [ ! -L /var/www/assetmanagement/files ]; then
            ln -sf /var/www/assetmanagement/current/wwwroot/files /var/www/assetmanagement/files
          fi
          
          # Set ownership
          chown -R $USER:$USER /var/www/assetmanagement/
          
          echo "Application extracted and configured successfully"

    - name: Start application
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.AWS_EC2_HOST }}
        username: ${{ secrets.AWS_EC2_USERNAME }}
        key: ${{ secrets.AWS_EC2_KEY }}
        timeout: 300s
        script: |
          # Stop and disable any existing service
          sudo systemctl stop assetmanagement 2>/dev/null || true
          sudo systemctl disable assetmanagement 2>/dev/null || true
          sudo rm -f /etc/systemd/system/assetmanagement.service
          sudo systemctl daemon-reload
          
          # Create systemd service with absolute path to verified dotnet
          DOTNET_PATH="$HOME/.dotnet/dotnet"
          
          echo "📝 Creating systemd service with dotnet path: $DOTNET_PATH"
          sudo tee /etc/systemd/system/assetmanagement.service > /dev/null <<EOF
          [Unit]
          Description=Asset Management System - .NET Web Application
          After=network.target
          StartLimitIntervalSec=0

          [Service]
          Type=notify
          User=$USER
          Group=$USER
          WorkingDirectory=/var/www/assetmanagement/current
          ExecStart=$DOTNET_PATH AssetManagementSystem.PL.dll
          Restart=always
          RestartSec=5
          Environment=ASPNETCORE_ENVIRONMENT=Production
          Environment=ASPNETCORE_URLS=http://localhost:5000
          Environment=DOTNET_ROOT=$HOME/.dotnet
          Environment=PATH=$HOME/.dotnet:/usr/local/bin:/usr/bin:/bin
          Environment=DOTNET_PRINT_TELEMETRY_MESSAGE=false
          Environment=DOTNET_CLI_TELEMETRY_OPTOUT=1
          NoNewPrivileges=true
          PrivateTmp=true
          ProtectSystem=strict
          ProtectHome=true
          ReadWritePaths=/var/www/assetmanagement/current/wwwroot/files
          ReadWritePaths=/var/www/assetmanagement/current/Logs
          StandardOutput=journal
          StandardError=journal
          SyslogIdentifier=assetmanagement
          KillMode=mixed
          TimeoutStartSec=30
          TimeoutStopSec=30

          [Install]
          WantedBy=multi-user.target
          EOF
          
          # Reload and start service
          sudo systemctl daemon-reload
          
          # Final verification before starting service
          echo "🔍 Pre-start verification:"
          echo "Dotnet executable exists: $([ -f "$DOTNET_PATH" ] && echo "YES" || echo "NO")"
          echo "Dotnet executable size: $(stat -c%s "$DOTNET_PATH" 2>/dev/null || echo "NOT FOUND") bytes"
          echo "Dotnet version test: $("$DOTNET_PATH" --version 2>/dev/null || echo "FAILED")"
          
          # Start the service
          echo "🚀 Starting Asset Management System..."
          sudo systemctl enable assetmanagement
          sudo systemctl start assetmanagement
          
          # Wait and check status
          sleep 15
          
          if sudo systemctl is-active --quiet assetmanagement; then
            echo "✅ Application started successfully"
            sudo systemctl status assetmanagement --no-pager -l
          else
            echo "❌ Failed to start application"
            echo "Service status:"
            sudo systemctl status assetmanagement --no-pager -l
            echo "Recent logs:"
            sudo journalctl -u assetmanagement --no-pager -l -n 30
            echo "Final diagnostic info:"
            echo "Dotnet path: $DOTNET_PATH"
            echo "Dotnet exists: $([ -f "$DOTNET_PATH" ] && echo "YES" || echo "NO")"
            echo "Dotnet size: $(stat -c%s "$DOTNET_PATH" 2>/dev/null || echo "NOT FOUND") bytes"
            echo "Application files:"
            ls -la /var/www/assetmanagement/current/AssetManagementSystem.PL.dll 2>/dev/null || echo "Application DLL not found"
            exit 1
          fi

    - name: Health check
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.AWS_EC2_HOST }}
        username: ${{ secrets.AWS_EC2_USERNAME }}
        key: ${{ secrets.AWS_EC2_KEY }}
        script: |
          echo "Performing comprehensive health checks..."
          
          # Wait for application to be fully ready
          echo "Waiting for application to initialize..."
          sleep 15
          
          # Ensure nginx is running
          sudo systemctl start nginx || true
          
          # Check application service status
          echo "=== SERVICE STATUS CHECK ==="
          if sudo systemctl is-active --quiet assetmanagement; then
            echo "✅ Asset Management service is active"
          else
            echo "❌ Asset Management service is not active"
            echo "Service status:"
            sudo systemctl status assetmanagement --no-pager -l
            echo "Recent logs:"
            sudo journalctl -u assetmanagement --no-pager -l -n 30
            exit 1
          fi
          
          # Check if application responds on localhost:5000
          echo "=== APPLICATION HEALTH CHECK ==="
          echo "Testing application on port 5000..."
          APP_READY=false
          for i in {1..30}; do
            if curl -f http://localhost:5000 > /dev/null 2>&1; then
              echo "✅ Application is responding on port 5000 (attempt $i)"
              APP_READY=true
              break
            fi
            echo "Waiting for application... (attempt $i/30)"
            sleep 5
          done
          
          if [ "$APP_READY" = false ]; then
            echo "❌ Application is not responding on port 5000 after 150 seconds"
            echo "Checking application logs..."
            sudo journalctl -u assetmanagement --no-pager -l -n 30
            echo "Checking if process is running..."
            ps aux | grep dotnet || echo "No dotnet processes found"
            echo "Checking port 5000..."
            sudo netstat -tlnp | grep :5000 || echo "Nothing listening on port 5000"
            echo "Checking .NET version..."
            dotnet --version || echo ".NET not found"
            exit 1
          fi
          
          # Test through nginx (port 80)
          echo "=== NGINX PROXY CHECK ==="
          echo "Testing application through Nginx..."
          NGINX_READY=false
          for i in {1..15}; do
            if curl -f http://localhost > /dev/null 2>&1; then
              echo "✅ Nginx proxy is working (attempt $i)"
              NGINX_READY=true
              break
            fi
            echo "Waiting for nginx... (attempt $i/15)"
            sleep 3
          done
          
          if [ "$NGINX_READY" = false ]; then
            echo "❌ Nginx proxy is not working"
            echo "Nginx status:"
            sudo systemctl status nginx --no-pager -l
            echo "Nginx configuration test:"
            sudo nginx -t
            echo "Checking port 80:"
            sudo netstat -tlnp | grep :80 || echo "Nothing listening on port 80"
          fi
          
          # Final deployment verification
          echo "=== DEPLOYMENT VERIFICATION ==="
          echo "Application URL: http://${{ secrets.AWS_EC2_HOST }}"
          echo "Service Status: $(sudo systemctl is-active assetmanagement)"
          echo "Nginx Status: $(sudo systemctl is-active nginx)"
          echo "Listening Ports:"
          sudo netstat -tlnp | grep -E ':80|:5000' || echo "No services listening on expected ports"
          
          if [ "$APP_READY" = true ] && [ "$NGINX_READY" = true ]; then
            echo "🎉 DEPLOYMENT SUCCESSFUL!"
            echo "Application is accessible at: http://${{ secrets.AWS_EC2_HOST }}"
          else
            echo "❌ DEPLOYMENT PARTIALLY FAILED"
            echo "Application direct access (port 5000): $APP_READY"
            echo "Nginx proxy access (port 80): $NGINX_READY"
            exit 1
          fi

    - name: Cleanup old backups
      uses: appleboy/ssh-action@v1.0.3
      continue-on-error: true
      with:
        host: ${{ secrets.AWS_EC2_HOST }}
        username: ${{ secrets.AWS_EC2_USERNAME }}
        key: ${{ secrets.AWS_EC2_KEY }}
        script: |
          # Clean up old backups (keep only 3 most recent)
          cd /var/www/assetmanagement
          ls -t backup_* 2>/dev/null | tail -n +4 | xargs rm -rf || echo "No old backups to clean"
          
          # Clean up old log files
          find /var/log/assetmanagement -name "*.log" -mtime +30 -delete 2>/dev/null || echo "No old logs to clean"
          
          echo "Cleanup completed"
